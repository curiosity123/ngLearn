// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200723201513_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Models.LearningItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CorrectSentence")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Item")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("LearningSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("SentenceWithGaps")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("LearningSetId");

                    b.ToTable("LearningItems");
                });

            modelBuilder.Entity("API.Models.LearningProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("LearningItemId")
                        .HasColumnType("bigint");

                    b.Property<bool>("MemorizedLevel")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LearningItemId");

                    b.HasIndex("OwnerId");

                    b.ToTable("LearningProgresses");
                });

            modelBuilder.Entity("API.Models.LearningSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Rates")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("LearningSets");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.UserLearningSet", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("LearningSetId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "LearningSetId");

                    b.HasIndex("LearningSetId");

                    b.ToTable("UserLearningSets");
                });

            modelBuilder.Entity("API.Models.LearningItem", b =>
                {
                    b.HasOne("API.Models.LearningSet", "LearningSet")
                        .WithMany("LearningItems")
                        .HasForeignKey("LearningSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.LearningProgress", b =>
                {
                    b.HasOne("API.Models.LearningItem", "LearningItem")
                        .WithMany("LearningProgresses")
                        .HasForeignKey("LearningItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("API.Models.LearningSet", b =>
                {
                    b.HasOne("API.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("API.Models.UserLearningSet", b =>
                {
                    b.HasOne("API.Models.LearningSet", "LearningSet")
                        .WithMany("UserLearningSets")
                        .HasForeignKey("LearningSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("UserLearningSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
